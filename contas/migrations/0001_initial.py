# Generated by Django 2.1.1 on 2018-12-20 18:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academico', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='Data de inclusão da foto')),
                ('data_alteracao', models.DateField(auto_now=True, verbose_name='Data de inclusão da foto')),
                ('ativo', models.BooleanField(blank=True, default=True, verbose_name='Ativo?')),
                ('telefone', models.CharField(max_length=25, verbose_name='Telefone')),
                ('foto', models.ImageField(null=True, upload_to='imagens')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Horario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='Data de inclusão da foto')),
                ('data_alteracao', models.DateField(auto_now=True, verbose_name='Data de inclusão da foto')),
                ('ativo', models.BooleanField(blank=True, default=True, verbose_name='Ativo?')),
                ('dia_semana', models.CharField(choices=[('Domingo', 'Domingo'), ('Segunda', 'Segunda'), ('Terça', 'Terça'), ('Quarta', 'Quarta'), ('Quinta', 'Quinta'), ('Sexta', 'Sexta'), ('Sabado', 'Sabado')], default='Segunda', max_length=15, verbose_name='Dia da Semana')),
                ('horario_inicio', models.TimeField(verbose_name='Horário de inicio do Estagio')),
                ('horario_fim', models.TimeField(verbose_name='Horário de Fim do Estagio')),
            ],
            options={
                'ordering': ['-ativo', '-data_alteracao'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HorarioSuporte',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='Data de inclusão da foto')),
                ('data_alteracao', models.DateField(auto_now=True, verbose_name='Data de inclusão da foto')),
                ('ativo', models.BooleanField(blank=True, default=True, verbose_name='Ativo?')),
                ('horario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contas.Horario')),
            ],
            options={
                'verbose_name': 'Horário de Suporte',
                'verbose_name_plural': 'Horários de Suporte',
            },
        ),
        migrations.CreateModel(
            name='TipoSolicitante',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_criacao', models.DateField(auto_now_add=True, verbose_name='Data de inclusão da foto')),
                ('data_alteracao', models.DateField(auto_now=True, verbose_name='Data de inclusão da foto')),
                ('ativo', models.BooleanField(blank=True, default=True, verbose_name='Ativo?')),
                ('tipo', models.CharField(max_length=100, verbose_name='Tipo Solicitante')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição do Tipo Solicitante')),
            ],
            options={
                'verbose_name': 'Tipo Solicitante',
                'verbose_name_plural': 'Tipos Solicitante',
            },
        ),
        migrations.CreateModel(
            name='Administrador',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administrador',
                'verbose_name_plural': 'Administradores',
            },
            bases=('contas.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Solicitante',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('curso_setor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='academico.CursoSetor')),
                ('tipo_solicitante', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contas.TipoSolicitante')),
            ],
            options={
                'verbose_name': 'Solicitante',
                'verbose_name_plural': 'Solicitantes',
            },
            bases=('contas.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SuporteConta',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('horarios', models.ManyToManyField(blank=True, to='contas.Horario')),
            ],
            options={
                'verbose_name': 'suporte de Contas',
                'verbose_name_plural': 'suportes de Contas',
            },
            bases=('contas.usuario',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='usuario',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='usuario',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='horariosuporte',
            name='suporte',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contas.SuporteConta'),
        ),
    ]
